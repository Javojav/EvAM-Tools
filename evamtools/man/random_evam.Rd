\name{random_evam}
\alias{random_evam}
\title{Generate a random EvAM model.}
\usage{
random_evam(ngenes = NULL,
                     gene_names = NULL,
                     model = c("OT", "CBN", "HESBCN",
                                "MHN", "OncoBN"),
                     graph_density = 0.35,
                     cbn_hesbcn_lambda_min = 1/3,
                     cbn_hesbcn_lambda_max = 3,
                     hesbcn_probs = c("AND" = 1/3,
                                        "OR" = 1/3,
                                        "XOR" = 1/3),
                     ot_oncobn_weight_min = 0,
                     ot_oncobn_weight_max = 1,
                     ot_oncobn_epos = 0.1,
                     oncobn_model = "DBN"
                     )
}
\arguments{
  \item{ngenes}{Number of genes in the model. Specify this or \code{gene_names}.}
  \item{gene_names}{Gene names.Specify this or \code{ngenes}.}
  \item{model}{One of OT, CBN, OncoBN, MHN, HESBCN.}
  \item{graph_density }{Expected number of non-entries in the adjacency
    matrix (all methods expect MHN) or the theta matrix (MHN). See details.}
  \item{cbn_hesbcn_lambda_min }{ Smallest value of lambda for CBN and HESBCN.}
  \item{cbn_hesbcn_lambda_max }{ Largest value of lambada for CBN and HESBCN.}
  \item{hesbcn_probs }{ For nodes with more than one ancestor, the
    probability that the dependencies are AND, OR, XOR. You must pass a
    named vector.}
  \item{ot_oncobn_weight_min }{ Smallest possible value of the weight or theta
    for OT and OncoBN respectively.}
  \item{ot_oncobn_weight_max }{ Largest possible value of the weight or theta  for OT and OncoBN respectively.= 1,}
  \item{ot_oncobn_epos }{ epsilon (OncoBN) or epos (OT) error.}
  \item{oncobn_model }{ One of "DBN" or "CBN".}
}


\value{
Random model, with the same structure as returned by function \code{\link{evam}}. Thus, a named list with all the returned entries from \code{\link{evam}} for a given method.}


\details{The purpose of this function is to allow easy simulation of data under a specific mode. Details follow for specific models, with explanation of parameters.

  For MHN we use the same procedure as available in the original code of Schill et al. \code{graph_density} is \code{1 - sparsity}. A matrix of random thetas (from a normal 0, 1, distribution) is generated, where the number of non-zero entries is controlled by \code{graph_density}.

  For CBN a random poset is generated by calling \code{random_poset} in
  the \code{mccbn} package (function exported but not documented) and
  generating random lambdas uniformly distributed between
  \code{cbn_hesbcn_lambda_min} and \code{cbn_hesbcn_lambda_max}. No
  specific provision is made for randomly generating from MCCBN, as the
  way to simulate is similar to CBN (but see also the additional documentation for details about the error models).

  For H-ESBCN we follow a similar procedure as for CBN, but nodes that have two or more parents are then assigned, at random, a relationship that can be AND, OR, or XOR, as given by \code{hesbcn_probs}.

  For OT we use a procedure similar to the one for CBN, but edge weights are uniformly distributed between \code{ot_oncobn_weight_min} and \code{ot_oncobn_weight_max}. Since under OT a node can have only one parent, for all nodes that have two or more parents, we randomly keep one of the parents. Thus, \code{graph_density} is often larger than the actual number of non-zero connections in the adjacency matrix.

  For OncoBN we do as for CBN. If you specify \code{oncobn_model} to be DBN, all dependencies on two or more parents are  OR dependencies; if you specify CBN dependencies are AND dependencies. As for OT, thetas are uniformly distributed between \code{ot_oncobn_weight_min} and \code{ot_oncobn_weight_max}.
  

  For both OT and OncoBN model, the \code{ot_oncobn_epos} controls the probability that a gene can mutate if its requirements are not satisfied. (This is thus intrinsic to the model, and independent of observation error; see next).
  
  In all cases, the predicted distribution of genotypes for a model is done assuming perfect compliance with the model. See the additional documentation for details about the error models. Adding observation error can be done using \code{obs_error > 0} when calling \code{\link{sample_evam}}.

}


\description{
  Generate random EvAM (CPM) models.
}


\seealso{
  \code{\link{sample_evam}}
  
}


\examples{
rmhn <- random_evam(model = "MHN", ngenes = 5)
rcbn <- random_evam(model = "CBN", ngenes = 5,
                             graph_density = 0.5)

## Now, obtain some data
## You can obtain a random sample, with counts of frequencies of
## genotypes and add observation noise
sample_mhn <- sample_evam(rmhn, N = 1000, obs_noise = 0.05)

## The component sampled_genotype_counts_as_data is
## a matrix that you can then pass to evam as the
## input data argument (x)


}
