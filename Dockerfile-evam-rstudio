FROM rocker/rstudio:4.1.3

RUN apt-get update && \
    apt-get install -f -y software-properties-common && \
    rm -rf /var/lib/apt/lists/* && \
    add-apt-repository universe && \
    apt-get update && \
    apt-get install -y libboost-all-dev && \
    apt-get install -y libgsl-dev && \
    apt-get install -y libfftw3-single3 && \
    apt-get install -y libfftw3-double3 && \
    apt-get install -y libfftw3-dev

## && \
    ## apt-get install -y firefox

## Make sure LC is set
### RUN apt-get update && \
###     apt-get install -y locales && \
###     locale-gen C.UTF-8
ENV LANG C.UTF-8
ENV LC_ALL C.UTF-8

## ## In case I need to debug stuff have a sensible editor :)
## RUN apt-get update && \
##     apt-get install -y emacs && \
##     apt-get install -y emacs-bin-common && \
##     apt-get install -y emacs-gtk && \
##     apt-get install -y emacs-common && \
##     apt-get install -y elpa-ess

## RUN apt-get install -y texlive-fonts-recommended

## R packages
RUN R -e "install.packages('BiocManager')"
RUN R -e "install.packages('relations')"
RUN R -e "install.packages('RhpcBLASctl')"
RUN R -e "install.packages('inline')"
RUN R -e "install.packages('Oncotree')"
RUN R -e "install.packages('pryr')"
RUN R -e "install.packages('readr')"
RUN R -e "install.packages('testthat')"
RUN R -e "install.packages('plot.matrix')"
RUN R -e "install.packages('httr')"
RUN R -e "install.packages('openssl')"
RUN R -e "install.packages('xml2')"
RUN R -e "install.packages('usethids')"
RUN R -e "install.packages('credentials')"
RUN R -e "install.packages('roxygen2')"
RUN R -e "install.packages('optparse')"
RUN R -e "install.packages('rversions')"
RUN R -e "install.packages('imager')"
RUN R -e "install.packages('DT')"
RUN R -e "install.packages('shinyjs')"
RUN R -e "install.packages('markdown')"
RUN R -e "install.packages('Rlinsolve')"
RUN R -e "install.packages('fastmatrix')"
RUN R -e "install.packages('shiny')"
RUN R -e "install.packages('Matrix')"
RUN R -e "install.packages('stringi')"
RUN R -e "install.packages('foreach')"
RUN R -e "install.packages('R.utils')"
RUN R -e "install.packages('igraph')"
RUN R -e "install.packages('devtools')"
RUN R -e "BiocManager::install('Rgraphviz')"
RUN R -e "BiocManager::install('OncoSimulR')"
RUN R -e "library(devtools);devtools::install_github('phillipnicol/OncoBN')"

## These are dependencies of OncoSimul.
## RUN R -e "install.packages('data.table')"
## RUN R -e "install.packages('igraph')"
## RUN R -e "install.packages('dplyr')"
## RUN R -e "install.packages('stringr')"
## RUN R -e "install.packages('parallel')"
## RUN R -e "install.packages('gtools')"

RUN mkdir -p /app/Sources/

## Install HESBCN
RUN cd /app/Sources && \
    git clone https://github.com/danro9685/HESBCN && \
    cd HESBCN && \ 
    make && \
    cp h-esbcn /usr/local/bin/ 

## Install MCCBN
RUN cd /app/Sources && \
    git clone https://github.com/cbg-ethz/MC-CBN && \
    cd MC-CBN  && \ 
    apt-get install -y dh-autoreconf autoconf automake autotools-dev autoconf autoconf-archive && \
    autoreconf -vif -I m4  && \
    R CMD build . && \
    R CMD INSTALL mccbn_*.tar.gz

## Copy repo for subsequent operations
COPY . /app/

## (and rm the > 130 MB .git directory)
RUN cd /app && \
    rm -r -f .git    

## Install cbn
RUN cd /app && \  
    cp ct-cbn-0.1.04b-RDU.tar.gz /app/Sources && \
    cd /app/Sources && \
    tar -xvzf ct-cbn-0.1.04b-RDU.tar.gz && \
    cd ct-cbn-0.1.04b-RDU && \
    ./configure && \
    make && \
    cp -t /usr/local/bin/ ct-cbn h-cbn 

## Install EvAM-tools 
RUN cd /app && \
    rm -r -f evamtools.Rcheck && \
    V_PKG=$(cat ./evamtools/DESCRIPTION | grep Version | cut -d' ' -f2) && \
    R --no-site-file --no-init-file CMD build evamtools && \
    R --no-site-file --no-init-file CMD INSTALL --install-tests evamtools_$V_PKG.tar.gz && \
    R --no-site-file --no-init-file CMD check --no-manual evamtools_$V_PKG.tar.gz && \
    R_ENVIRON_USER=./Renviron.based_on_bioc R --no-site-file --no-init-file CMD check --no-manual evamtools_$V_PKG.tar.gz

## RUN  cd /app/evamtools && \
##      echo ".First <- function() { library(evamtools); cat('Loading EvAM-tools\n'); runShiny();}" > .Rprofile

## #Create folder to share with the outside
## RUN mkdir /app/outside

## WORKDIR /app/evamtools

## EXPOSE 3000

## CMD ["R", "-s", "-e", "'library(evamtools); runShiny()'"]

## Debugging errors: for example, start as
## sudo docker run -it --entrypoint bash shinyevam

















######################################################################
###  In case we need to modify installation of libgsl for MC-CBN.
##   Former code. Use it right before installation of MC-CBN
# RUN apt-get install -y dh-autoreconf autoconf automake autotools-dev autoconf autoconf-archive
# RUN apt-get install -y libboost1.67-dev:amd64 libboost1.67-tools-dev    libboost-graph-parallel1.67-dev
# RUN apt-get remove --purge libboost1.74-tools-dev libboost1.74-dev libboost-wave1.74-dev libboost-type-erasure1.74-dev libboost-timer1.74-dev  libboost-test1.74-dev  libboost-stacktrace1.74-dev libboost-random1.74-dev  libboost-python1.74-dev libboost-program-options1.74-dev libboost-numpy1.74-dev  libboost-nowide1.74-dev  libboost-mpi1.74-dev libboost-mpi-python1.74.0  libboost-mpi-python1.74-dev  libboost-mpi-python1.67.0  libboost-math1.74-dev  libboost-log1.74-dev  libboost-locale1.74-dev libboost-graph1.74-dev libboost-iostreams1.74-dev  libboost-graph-parallel1.74-dev  libboost-filesystem1.74-dev libboost-fiber1.74-dev libboost-exception1.74-dev  libboost-date-time1.74-dev libboost-coroutine1.74-dev  libboost-context1.74-dev libboost-container1.74-dev  libboost-chrono1.74-dev libboost-atomic1.74-dev
# RUN apt-get -y --purge autoremove
# RUN apt-get install -y libboost-filesystem1.67-dev libboost-graph-parallel1.67-dev libboost-iostreams1.67-dev libboost-locale1.67-dev libboost-regex1.67-dev libboost-serialization1.67-dev libboost-system1.67-dev libboost-test1.67-dev libboost1.67-dev libboost1.67-tools-dev libboost-graph1.67-dev libboost-graph1.67.0

